package com.example.news_app;import android.annotation.SuppressLint;import android.arch.lifecycle.Observer;import android.arch.lifecycle.ViewModelProviders;import android.content.Context;import android.content.Intent;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.Menu;import android.view.MenuItem;import com.example.news_app.utilities.JsonUtils;import com.example.news_app.utilities.NetworkUtils;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.List;import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;public class MainActivity extends AppCompatActivity implements    NewsRecyclerViewAdapter.TouchListListener {  private List<NewsItem> news = new ArrayList<>();  private NewsRecyclerViewAdapter adapter;  private NewsItemViewModel viewModel;  public static final int NEW_WORD_ACTIVITY_REQUEST_CODE = 1;  @Override  protected void attachBaseContext(Context newBase) {    super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));  }  @Override  protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    LinearLayoutManager layoutManager = new LinearLayoutManager(this);    RecyclerView recyclerView = findViewById(R.id.news_recyclerview);    viewModel = ViewModelProviders.of(this).get(NewsItemViewModel.class);    adapter = new NewsRecyclerViewAdapter(viewModel, MainActivity.this);    viewModel.getAllNews().observe(this, new Observer<List<NewsItem>>() {      @Override      public void onChanged(@Nullable List<NewsItem> items) {        adapter.setNews(items);      }    });    recyclerView.setAdapter(adapter);    recyclerView.setLayoutManager(layoutManager);    recyclerView.setHasFixedSize(true);    viewModel.getAllNews().observe(this, new Observer<List<NewsItem>>() {      @Override      public void onChanged(@Nullable List<NewsItem> items) {        adapter.setNews(items);      }    });  }  @Override  public boolean onCreateOptionsMenu(Menu menu) {    getMenuInflater().inflate(R.menu.main_menu, menu);    return true;  }  @Override  public boolean onOptionsItemSelected(MenuItem item) {    int selectedItemId = item.getItemId();    if (selectedItemId == R.id.get_news) {      displayNews();      return true;    }    return super.onOptionsItemSelected(item);  }  private void displayNews() {    URL url = NetworkUtils.buildURL();    NewsQueryTask task = new NewsQueryTask();    task.execute(url);  }  @Override  public void onTouchList(int index) {    Uri website = Uri.parse(viewModel.getAllNews().getValue().get(index).getUrl());    Intent intent = new Intent(Intent.ACTION_VIEW, website);    if (intent.resolveActivity(getPackageManager()) != null) {      startActivity(intent);    }  }  @SuppressLint("StaticFieldLeak")  public class NewsQueryTask extends AsyncTask<URL, Void, String> {    @Override    protected void onPreExecute() {      super.onPreExecute();    }    @Override    protected String doInBackground(URL... urls) {      URL url = urls[0];      String data = null;      try {        data = NetworkUtils.getResponseFromHttpUrl(url);      } catch (IOException e) {        e.printStackTrace();      }      return data;    }    @Override    protected void onPostExecute(String result) {      super.onPostExecute(result);      news = JsonUtils.parseNews(result);//      adapter.news.addAll(news);      adapter.getNews().addAll(news);      adapter.notifyDataSetChanged();    }  }}